// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Organization {
  COMMON
  GSR
  PPSR
  FRIS
  STUW
  STUREC
  STUART
  BSR
  STUVECO
  STURA
  STUBIO
  DSR
  STUGG
  STUFF

  @@map("organization")
}

enum Language {
  DUTCH
  ENGLISH

  @@map("language")
}

enum Markup {
  PLAIN_TEXT
  MARKDOWN

  @@map("markup")
}

model Page {
  id               Int          @id @default(autoincrement())
  slug             String
  nav_name_dutch   String?
  nav_name_english String?
  content_dutch    String
  content_english  String?
  organization     Organization
  markup           Markup
  config           Json         @default("{}")

  @@unique([organization, slug])
  @@map("page")
}

model i18n {
  id           Int          @id @default(autoincrement())
  key          String?
  dutch        String
  english      String?
  organization Organization
  markup       Markup

  @@unique([key, organization])
  @@map("i18n")
}

model Configuration {
  id           Int          @id @default(autoincrement())
  organization Organization @unique
  active       Boolean      @default(false)
  hostnames    String[]     @default([])

  // Socials
  facebook_url  String?
  twitter_url   String?
  instagram_url String?
  tiktok_url    String?
  linkedin_url  String?
  discord_url   String?
  github_url    String?

  // Contact Information
  adres       String?
  phone       String?
  email_adres String
  group_photo String?

  // Branding
  brand_color_primary   String
  brand_color_secondary String
  logo_url              String
  name                  String
  short_description     String
  info_bar_text         String 
  info_bar_link         String

  // Features
  navbar            Json    @default("[]")
  i18n              Boolean @default(false)
  info_bar          Boolean @default(false)
  who_section       Boolean @default(false)
  news_section      Boolean @default(false)
  faq_section       Boolean @default(false)
  opinions_section  Boolean @default(false)
  elections_section Boolean @default(false)
  feedback_section  Boolean @default(false)
  project_section   Boolean @default(false)
  calendar_section  Boolean @default(false)
  calendars         String[] @default([])

  @@map("configuration")
}

model OpinionGroup {
  id           Int          @id @default(autoincrement())
  sort_index   Int
  name         String
  about        String?
  opinions     Opinion[]
  organization Organization

  @@map("opinion_group")
}

model Opinion {
  id            Int          @id @default(autoincrement())
  published_at  DateTime
  title         String
  about         String?
  document_link String
  published     Boolean
  organization  Organization
  image         String?

  opinion_group_id Int
  opinion_group    OpinionGroup @relation(fields: [opinion_group_id], references: [id])

  @@map("opinion")
}

model News {
  id               Int          @id @default(autoincrement())
  title            String
  content          String
  synopsis         String
  published        Boolean
  published_at     DateTime
  author           String?
  banner_image     String?
  banner_image_alt String?
  organization     Organization

  @@map("news")
}

model Question {
  id           Int          @id @default(autoincrement())
  question     String
  answer       String
  sort_index   Int          @default(0)
  organization Organization

  question_category_id Int
  question_category    QuestionCategory @relation(fields: [question_category_id], references: [id])

  @@map("question")
}

model QuestionCategory {
  id           Int          @id @default(autoincrement())
  description  String?
  sort_index   Int          @default(0)
  title        String
  questions    Question[]
  slug         String
  organization Organization

  @@map("question_category")
}

model Person {
  id           Int          @id @default(autoincrement())
  name         String?
  image        String?
  mail         String?
  organization Organization

  substitute_for_positions SubstituteForPosition[] @relation("Person_to_SubstitutePosition")
  positions PersonPosition[] @relation("person")

  @@map("person")
}

model Report {
  id           Int          @id @default(autoincrement())
  workgroup    String
  name         String
  url          String

  organization Organization

  @@map("report")
}


model PersonGroup {
  id           Int          @id @default(autoincrement())
  name         String
  description  String?
  sort_index   Int          @default(0)
  organization Organization

  positions PersonPosition[]

  @@map("person_group")
}

model SubstituteForPosition { //this needs to be a seperate model because it is a many to many relationship (many persons can be substitutes for many positions and vice versa)
  id Int @id @default(autoincrement())
  
  person_id Int
  person    Person @relation("Person_to_SubstitutePosition", fields: [person_id], references: [id])

  position_id Int
  position    PersonPosition @relation("SubstitutePosition_to_PersonPosition", fields: [position_id], references: [id])

  @@map("substitute_for_position")
}

model PersonPosition {
  id              Int          @id @default(autoincrement())
  year            Int
  name            String
  sort_index      Int          @default(0)
  education       String?
  organization    Organization

  substitutes     SubstituteForPosition[] @relation("SubstitutePosition_to_PersonPosition")

  person_id Int
  person    Person @relation("person", fields: [person_id], references: [id])

  person_group_id Int
  person_group    PersonGroup @relation(fields: [person_group_id], references: [id])

  @@map("person_position")
}

enum Faculty {
  LW // Letteren en Wijsbegeerte
  RE // Recht en Criminologie
  WE // Wetenschappen
  GE // Geneeskunde en Gezondheidswetenschappen
  EA // Ingenieurswetenschappen en Architectuur
  TW // Ingenieurswetenschappen en Architectuur, nogmaals?
  EB // Economie en Bedrijfskunde
  DI // Diergeneeskunde
  PP // Psychologie en Pedagogische Wetenschappen
  BW // Bio-ingenieurswetenschappen
  FW // Farmaceutische Wetenschappen
  PS // Politieke en Sociale Wetenschappen
  LA // Bio-ingenieurswetenschappen

  @@map("faculty")
}

model Course {
  name    String
  faculty Faculty
  code    String  @id

  subjects CourseSubject[]

  @@map("course")
}

model Subject {
  name    String
  code    String @id
  teacher String

  courses CourseSubject[]

  @@map("subject")
}

model CourseSubject {
  id Int @id @default(autoincrement())

  course_code String
  course      Course @relation(fields: [course_code], references: [code])

  subject_code String
  subject      Subject @relation(fields: [subject_code], references: [code])

  @@map("course_subject")
}

model Calendar {
  id           Int          @id @default(autoincrement())
  url          String
  enabled      Boolean
  organization Organization
  name         String

  @@map("calendar")
}

model Project {
  id           Int          @id @default(autoincrement())
  image        String
  title        String       @unique
  about        String
  sort_index   Int          @default(0)
  organization Organization

  @@map("project")
}

model Admin {
  id           Int          @id @default(autoincrement())
  user_id      Int
  user         User         @relation(fields: [user_id], references: [id])
  organization Organization

  @@map("admin")
}

model User {
  id         Int     @id @default(autoincrement())
  username   String  @unique
  email      String
  given_name String
  surname    String
  student    Boolean
  admin      Admin[]

  @@map("user")
}

model Election {
  id           Int          @id @default(autoincrement())
  title        String
  description  String?
  document     String?
  public       Boolean      @default(false)
  organization Organization
  sort_index   Int          @default(0)

  election_group_id Int
  election_group    ElectionGroup @relation(fields: [election_group_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("election")
}

model ElectionGroup {
  id           Int          @id @default(autoincrement())
  name         String
  description  String?
  organization Organization
  sort_index   Int          @default(0)

  elections Election[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("election_group")
}
